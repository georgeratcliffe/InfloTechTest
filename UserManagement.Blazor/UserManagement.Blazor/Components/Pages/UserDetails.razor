@page "/details/{UserId}"
@using BlazorBootstrap
@using UserManagement.Data.Entities
@using UserManagement.Shared.ViewModels

@using Newtonsoft.Json
@inject HttpClient HttpClient

<h1> User Details</h1>

<div>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            Forename
        </dt>
        <dd class="col-sm-10">
            @User?.Forename
        </dd>
        <dt class="col-sm-2">
            Surname
        </dt>
        <dd class="col-sm-10">
            @User?.Surname
        </dd>
        <dt class="col-sm-2">
            DateOfBirth
        </dt>
        <dd class="col-sm-10">
            @User?.DateOfBirth
        </dd>
        <dt class="col-sm-2">
            Email
        </dt>
        <dd class="col-sm-10">
            @User?.Email)
        </dd>
        <dt class="col-sm-2">
            IsActive
        </dt>
        <dd class="col-sm-10">
            @User?.IsActive
        </dd>
    </dl>
</div>

<h2> Audit Logs</h2>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Forename</th>
                <th>Surname</th>
                <th>Date of Birth</th>
                <th>Email</th>
                <th>Account Active</th>
                <th>Action Date Time</th>
                <th>State</th>
                <th style="width: 1px;"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in AuditEntries ?? new())
            {
                <tr>
                    <td>
                        @item.Forename
                    </td>
                    <td>
                        @item.Surname
                    </td>
                    <td>
                        @Convert.ToString(string.Format("{0:dd/MM/yyyy}", item.DateOfBirth))
                    </td>
                    <td>
                        @item.Email
                    </td>
                    <td>
                        @(item.IsActive ? "Yes" : "No")
                    </td>
                    <td>
                        @(item.EndTime)
                    </td>
                    <td>
                        @(item.EntityState)
                    </td>
                </tr>
            }
            </tbody>
        </table>
   
    </div>

<Button Type="ButtonType.Link" Color="ButtonColor.Primary" To="@($"/edit/{UserId}")"> Edit User </Button>

<Button Type="ButtonType.Link" Color="ButtonColor.Primary" To="/userslist"> Back to User List </Button>



@code {

    [Parameter]
    public string? UserId { get; set; }

    public UserListItemViewModel? User { get; set; } = new();

    public List<AuditEntry>? AuditEntries { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var userResponse = await HttpClient.GetAsync($"api/GetUserByUserId/{UserId}");
        var userResult = await userResponse.Content.ReadAsStringAsync();
        User = JsonConvert.DeserializeObject<UserListItemViewModel>(userResult);

        var userAuditResponse = await HttpClient.GetAsync($"api/GetUserAuditByUserId/{UserId}");
        var userAuditResult = await userAuditResponse.Content.ReadAsStringAsync();
        AuditEntries = JsonConvert.DeserializeObject<List<AuditEntry>>(userAuditResult);
    }

}
